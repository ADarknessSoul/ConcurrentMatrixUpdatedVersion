package visual;

import java.awt.Color;
import Logic.Initialize;
import Logic.Initialize;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
/**
 *
 * @author gerar
 */
public class VisualArrays extends javax.swing.JFrame {


    int[][] matrixA;
    int[][] matrixB;
    int numHilos;
    int rowsA;
    int colsA;
    int rowsB;
    int colsB;
    
    public VisualArrays() {
        initComponents();
        numHilos = this.sliderHilos.getValue();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMultiplicacionMatrices = new javax.swing.JPanel();
        lblMultiplicacionMatrices = new javax.swing.JLabel();
        lblDimensiones = new javax.swing.JLabel();
        lblIconMatriz = new javax.swing.JLabel();
        lblMatrizADimensiones = new javax.swing.JLabel();
        lblMatrizBDimensiones = new javax.swing.JLabel();
        lblMAFilas = new javax.swing.JLabel();
        lblMBFilas = new javax.swing.JLabel();
        lblMAColumnas = new javax.swing.JLabel();
        txtFilasA = new javax.swing.JTextField();
        txtColumnasA = new javax.swing.JTextField();
        txtFilasB = new javax.swing.JTextField();
        lblMBColumnas = new javax.swing.JLabel();
        txtColumnasB = new javax.swing.JTextField();
        scrollPaneNota = new javax.swing.JScrollPane();
        lblNota = new javax.swing.JLabel();
        lblIcon2 = new javax.swing.JLabel();
        lblCrearMatrices = new javax.swing.JLabel();
        btnCrearMatrices = new javax.swing.JButton();
        lblError = new javax.swing.JLabel();
        scrollPanelMatrizA = new javax.swing.JScrollPane();
        txtAreaMatrizA = new javax.swing.JTextArea();
        scrollPanelMatrizB = new javax.swing.JScrollPane();
        txtAreaMatrizB = new javax.swing.JTextArea();
        lblMostrarMatrizA = new javax.swing.JLabel();
        lblMostrarMatrizB = new javax.swing.JLabel();
        lblIcon3 = new javax.swing.JLabel();
        sliderHilos = new javax.swing.JSlider();
        lblIniciarProceso = new javax.swing.JLabel();
        lblNumerodeHilos = new javax.swing.JLabel();
        lblMostrarNumHilos = new javax.swing.JLabel();
        btnIniciar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lblSecuencial = new javax.swing.JLabel();
        lblResultadoSecuencial = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtAreaResultadoSecuencial = new javax.swing.JTextArea();
        lblTiempoEjecucionSecuencial = new javax.swing.JLabel();
        lblResultadoTiempoSecuencial = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        lblConcurrente = new javax.swing.JLabel();
        lblResultadoConcurrente = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtAreaResultadoConcurrente = new javax.swing.JTextArea();
        lblEstadoHilos = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtAreaEstadoHilos = new javax.swing.JTextArea();
        lblTiempoEjecucionConcurrente = new javax.swing.JLabel();
        lblResultadoTiempoConcurrente = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelMultiplicacionMatrices.setBackground(new java.awt.Color(255, 255, 255));
        jPanelMultiplicacionMatrices.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelMultiplicacionMatrices.setMaximumSize(new java.awt.Dimension(201, 201));
        jPanelMultiplicacionMatrices.setMinimumSize(new java.awt.Dimension(200, 200));
        jPanelMultiplicacionMatrices.setPreferredSize(new java.awt.Dimension(800, 218));
        jPanelMultiplicacionMatrices.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblMultiplicacionMatrices.setText("Multiplicador de matrices.");
        jPanelMultiplicacionMatrices.add(lblMultiplicacionMatrices, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 0, -1, 20));

        lblDimensiones.setText("Establece las dimensiones de la matriz:");
        jPanelMultiplicacionMatrices.add(lblDimensiones, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, -1, 26));

        lblIconMatriz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Dimensions.png"))); // NOI18N
        jPanelMultiplicacionMatrices.add(lblIconMatriz, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, 110));

        lblMatrizADimensiones.setText("Matriz A:");
        jPanelMultiplicacionMatrices.add(lblMatrizADimensiones, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, -1, -1));

        lblMatrizBDimensiones.setText("Matriz B:");
        jPanelMultiplicacionMatrices.add(lblMatrizBDimensiones, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, 71, -1));

        lblMAFilas.setText("Filas:");
        jPanelMultiplicacionMatrices.add(lblMAFilas, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, -1, -1));

        lblMBFilas.setText("Filas:");
        jPanelMultiplicacionMatrices.add(lblMBFilas, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, -1, -1));

        lblMAColumnas.setText("Columnas:");
        jPanelMultiplicacionMatrices.add(lblMAColumnas, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, -1, -1));

        txtFilasA.setText("10");
        txtFilasA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilasAActionPerformed(evt);
            }
        });
        jPanelMultiplicacionMatrices.add(txtFilasA, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 54, -1));

        txtColumnasA.setText("10");
        jPanelMultiplicacionMatrices.add(txtColumnasA, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, 54, -1));

        txtFilasB.setText("10");
        txtFilasB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilasBActionPerformed(evt);
            }
        });
        jPanelMultiplicacionMatrices.add(txtFilasB, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, 54, -1));

        lblMBColumnas.setText("Columnas:");
        jPanelMultiplicacionMatrices.add(lblMBColumnas, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 110, 60, -1));

        txtColumnasB.setText("10");
        jPanelMultiplicacionMatrices.add(txtColumnasB, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 130, 54, -1));

        scrollPaneNota.setBackground(new java.awt.Color(255, 255, 255));

        lblNota.setBackground(new java.awt.Color(255, 255, 255));
        lblNota.setText("Nota: las columnas de la matriz A deben coincidir con las filas de la matriz B");
        scrollPaneNota.setViewportView(lblNota);

        jPanelMultiplicacionMatrices.add(scrollPaneNota, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 270, 40));

        lblIcon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/ArrowRigth.png"))); // NOI18N
        jPanelMultiplicacionMatrices.add(lblIcon2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 90, -1, -1));

        lblCrearMatrices.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCrearMatrices.setText("Crear matrices:");
        jPanelMultiplicacionMatrices.add(lblCrearMatrices, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 30, 140, -1));

        btnCrearMatrices.setText("Crear");
        btnCrearMatrices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearMatricesActionPerformed(evt);
            }
        });
        jPanelMultiplicacionMatrices.add(btnCrearMatrices, new org.netbeans.lib.awtextra.AbsoluteConstraints(402, 50, 150, -1));

        lblError.setForeground(new java.awt.Color(255, 0, 0));
        lblError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanelMultiplicacionMatrices.add(lblError, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 80, 70, 20));

        txtAreaMatrizA.setColumns(20);
        txtAreaMatrizA.setRows(5);
        scrollPanelMatrizA.setViewportView(txtAreaMatrizA);

        jPanelMultiplicacionMatrices.add(scrollPanelMatrizA, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 130, 130, 80));

        txtAreaMatrizB.setColumns(20);
        txtAreaMatrizB.setRows(5);
        scrollPanelMatrizB.setViewportView(txtAreaMatrizB);

        jPanelMultiplicacionMatrices.add(scrollPanelMatrizB, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 130, 140, 80));

        lblMostrarMatrizA.setText("Matriz A:");
        jPanelMultiplicacionMatrices.add(lblMostrarMatrizA, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 100, 50, 20));

        lblMostrarMatrizB.setText("Matriz B:");
        jPanelMultiplicacionMatrices.add(lblMostrarMatrizB, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 100, -1, -1));

        lblIcon3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/ArrowRigth.png"))); // NOI18N
        jPanelMultiplicacionMatrices.add(lblIcon3, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 90, -1, -1));

        sliderHilos.setMinimum(2);
        sliderHilos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderHilosStateChanged(evt);
            }
        });
        jPanelMultiplicacionMatrices.add(sliderHilos, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 80, -1, -1));

        lblIniciarProceso.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIniciarProceso.setText("Iniciar proceso:");
        jPanelMultiplicacionMatrices.add(lblIniciarProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 10, 190, -1));

        lblNumerodeHilos.setText("Número de hilos:");
        jPanelMultiplicacionMatrices.add(lblNumerodeHilos, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 50, -1, -1));

        lblMostrarNumHilos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMostrarNumHilos.setText("50");
        jPanelMultiplicacionMatrices.add(lblMostrarNumHilos, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 110, 50, 20));

        btnIniciar.setText("Iniciar");
        btnIniciar.setEnabled(false);
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });
        jPanelMultiplicacionMatrices.add(btnIniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 180, 210, -1));

        getContentPane().add(jPanelMultiplicacionMatrices, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, -50, -1, 20));

        lblSecuencial.setText("Secuencial:");
        jPanel3.add(lblSecuencial, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, -1));

        lblResultadoSecuencial.setText("Resultado:");
        jPanel3.add(lblResultadoSecuencial, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        txtAreaResultadoSecuencial.setColumns(20);
        txtAreaResultadoSecuencial.setRows(5);
        txtAreaResultadoSecuencial.setEnabled(false);
        jScrollPane5.setViewportView(txtAreaResultadoSecuencial);

        jPanel3.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 400, 330));

        lblTiempoEjecucionSecuencial.setText("Tiempo de ejecución:");
        jPanel3.add(lblTiempoEjecucionSecuencial, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 420, -1, -1));

        lblResultadoTiempoSecuencial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel3.add(lblResultadoTiempoSecuencial, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 440, 110, 20));

        jPanel2.add(jPanel3);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblConcurrente.setText("Concurrente:");
        jPanel4.add(lblConcurrente, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, -1, -1));

        lblResultadoConcurrente.setText("Resultado:");
        jPanel4.add(lblResultadoConcurrente, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));

        txtAreaResultadoConcurrente.setColumns(20);
        txtAreaResultadoConcurrente.setRows(5);
        txtAreaResultadoConcurrente.setEnabled(false);
        jScrollPane6.setViewportView(txtAreaResultadoConcurrente);

        jPanel4.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 410, 150));

        lblEstadoHilos.setText("Estado de los hilos:");
        jPanel4.add(lblEstadoHilos, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, -1, -1));

        txtAreaEstadoHilos.setColumns(20);
        txtAreaEstadoHilos.setRows(5);
        txtAreaEstadoHilos.setEnabled(false);
        jScrollPane7.setViewportView(txtAreaEstadoHilos);

        jPanel4.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 410, 160));

        lblTiempoEjecucionConcurrente.setText("Tiempo de ejecución:");
        jPanel4.add(lblTiempoEjecucionConcurrente, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 430, -1, -1));

        lblResultadoTiempoConcurrente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lblResultadoTiempoConcurrente, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 450, 110, 20));

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFilasAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilasAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilasAActionPerformed

    private void txtFilasBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilasBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilasBActionPerformed

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
       
        this.txtAreaEstadoHilos.setText("");
        this.lblResultadoTiempoConcurrente.setText("");
        Initialize process = new Initialize(); 
        process.initializeProcess(rowsA, colsA, rowsB, colsB, matrixA, matrixB, this.txtAreaResultadoSecuencial,  this.lblResultadoTiempoSecuencial);
        try {
            process.initializeConcurrentProcess(rowsA, colsA, rowsB, colsB, matrixA, matrixB, this.txtAreaResultadoConcurrente, this.lblResultadoTiempoConcurrente, numHilos, this.txtAreaEstadoHilos);
        } catch (InterruptedException ex) {
            Logger.getLogger(VisualArrays.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void btnCrearMatricesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearMatricesActionPerformed
        
        //Se evalua si las columnas de matriz A son iguales a las filas de matriz B
        if(!this.txtColumnasA.getText().equals(this.txtFilasB.getText())){
            
            //Se colocan errores y colores
            this.lblError.setText("Error!");
            this.txtColumnasA.setForeground(Color.red);
            this.txtFilasB.setForeground(Color.red);
            
        } else {
            
            //Se quitan errores y colores
            if(this.lblError.getText().length() > 0) this.lblError.setText("");
            if(this.txtColumnasA.getForeground() == Color.red || this.txtFilasB.getForeground() == Color.red) {
                           
                this.txtColumnasA.setForeground(Color.black);
                this.txtFilasB.setForeground(Color.black);
                
            }
            
            //Llamada para crear los arreglos de datos
            
            Initialize mainM = new Initialize();
            
            rowsA = Integer.parseInt(this.txtFilasA.getText());
            colsA = Integer.parseInt(this.txtColumnasA.getText());
            rowsB = Integer.parseInt(this.txtFilasB.getText());
            colsB = Integer.parseInt(this.txtColumnasB.getText());
            
            matrixA = new int[rowsA][colsA];
            matrixB = new int[rowsB][colsB];
            
            matrixA = mainM.initalizeArray(matrixA, rowsA, colsA);
            matrixB = mainM.initalizeArray(matrixB, rowsB, colsB);
            
            printArrays(this.txtAreaMatrizA, matrixA);
            printArrays(this.txtAreaMatrizB, matrixB);
            
            this.btnIniciar.setEnabled(true);
            
        }
        
    }//GEN-LAST:event_btnCrearMatricesActionPerformed

    private void sliderHilosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderHilosStateChanged
        
        numHilos = this.sliderHilos.getValue();
        lblMostrarNumHilos.setText(Integer.toString(this.sliderHilos.getValue()));
        
    }//GEN-LAST:event_sliderHilosStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualArrays.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualArrays.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualArrays.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualArrays.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VisualArrays().setVisible(true);
            }
        });
    }
    
    public void printArrays(JTextArea panel, int[][] matriz) {
        
        int length;
        
        if(matriz.length >= 2000) length = 5;
        else if(matriz.length >= 1000) length = 10;
        else if(matriz.length >= 50) length = 50;
        else length = matriz.length;
        
        panel.setText("");
        
        for (int i = 0; i < length; i++) {
            
            for (int j = 0; j < matriz[i].length; j++) {
                
                //Se escribe el valor actual de la matriz en el txtArea, dependiendo de su número de digitos se le da más espacios
                String textInPanel = panel.getText();
                switch (Integer.toString(matriz[i][j]).length()) {
                    case 1 -> panel.setText(textInPanel + Integer.toString(matriz[i][j]) + "    ");
                    case 2 -> panel.setText(textInPanel + Integer.toString(matriz[i][j]) + "   ");
                    case 3 -> panel.setText(textInPanel + Integer.toString(matriz[i][j]) + " ");
                }
                
            }
            
            String textInPanel = panel.getText();
            panel.setText(textInPanel + "\n");
            
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCrearMatrices;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelMultiplicacionMatrices;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblConcurrente;
    private javax.swing.JLabel lblCrearMatrices;
    private javax.swing.JLabel lblDimensiones;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblEstadoHilos;
    private javax.swing.JLabel lblIcon2;
    private javax.swing.JLabel lblIcon3;
    private javax.swing.JLabel lblIconMatriz;
    private javax.swing.JLabel lblIniciarProceso;
    private javax.swing.JLabel lblMAColumnas;
    private javax.swing.JLabel lblMAFilas;
    private javax.swing.JLabel lblMBColumnas;
    private javax.swing.JLabel lblMBFilas;
    private javax.swing.JLabel lblMatrizADimensiones;
    private javax.swing.JLabel lblMatrizBDimensiones;
    private javax.swing.JLabel lblMostrarMatrizA;
    private javax.swing.JLabel lblMostrarMatrizB;
    private javax.swing.JLabel lblMostrarNumHilos;
    private javax.swing.JLabel lblMultiplicacionMatrices;
    private javax.swing.JLabel lblNota;
    private javax.swing.JLabel lblNumerodeHilos;
    private javax.swing.JLabel lblResultadoConcurrente;
    private javax.swing.JLabel lblResultadoSecuencial;
    private javax.swing.JLabel lblResultadoTiempoConcurrente;
    private javax.swing.JLabel lblResultadoTiempoSecuencial;
    private javax.swing.JLabel lblSecuencial;
    private javax.swing.JLabel lblTiempoEjecucionConcurrente;
    private javax.swing.JLabel lblTiempoEjecucionSecuencial;
    private javax.swing.JScrollPane scrollPaneNota;
    private javax.swing.JScrollPane scrollPanelMatrizA;
    private javax.swing.JScrollPane scrollPanelMatrizB;
    private javax.swing.JSlider sliderHilos;
    private javax.swing.JTextArea txtAreaEstadoHilos;
    private javax.swing.JTextArea txtAreaMatrizA;
    private javax.swing.JTextArea txtAreaMatrizB;
    private javax.swing.JTextArea txtAreaResultadoConcurrente;
    private javax.swing.JTextArea txtAreaResultadoSecuencial;
    private javax.swing.JTextField txtColumnasA;
    private javax.swing.JTextField txtColumnasB;
    private javax.swing.JTextField txtFilasA;
    private javax.swing.JTextField txtFilasB;
    // End of variables declaration//GEN-END:variables
}
